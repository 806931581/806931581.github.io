<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>helloworld</title>
      <link href="/2019/08/07/spring/"/>
      <url>/2019/08/07/spring/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Bean-作用域"><a href="#Spring-Bean-作用域" class="headerlink" title="Spring Bean 作用域"></a>Spring Bean 作用域</h1><ul><li><strong>singleton   单例模式：（默认值）在Spring IoC容器仅存在一个Bean实例</strong></li><li><strong>prototype  原型模式： 每次从容器中调用Bean都会返回一个新实例。</strong></li><li>request 请求模式：每次Http请求都会创建一个新的Bean，仅使用于WebApplicationContext环境</li><li>Session 会话模式：同一个Http Session 共享一个Bean， 不用的Session使用不同的Bean，仅使用于WebApplicationContext环境</li><li>global-session模式：一般用于Portlet应用环境，该运用仅使用于WebApplicationContext环境</li></ul><h4 id="singleton-作用域："><a href="#singleton-作用域：" class="headerlink" title="singleton 作用域："></a>singleton 作用域：</h4><p>​    singleton是单例类型， 就是在创建起容器就同时自动创建了一个bean对象， 不管你是否使用， 他都存在了， 每次获取到的对象都是同一个对象。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- collaborators and configuration for this bean go here--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="prototype-作用域："><a href="#prototype-作用域：" class="headerlink" title="prototype 作用域："></a>prototype 作用域：</h4><p>​    它再我们创建容器的时候并没有实例化，而是我们获取bean的时候才去创建一个对象，而且每次获取到的对象都不是同一个对象。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- collaborators and configuration for this bean go here--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h1 id="Spring-Bean-生命周期"><a href="#Spring-Bean-生命周期" class="headerlink" title="Spring Bean 生命周期"></a>Spring Bean 生命周期</h1><blockquote><p>定义安装和拆卸一个bean，声明 init-method 和destroy-method参数的。</p><p>实例化bean时立即调用 init-methood 从容器中移除bean时调用 destroy-method</p><p>Bean的生命周期可以表达为：Bean的定义—–Bean的初始化—Bean的使用—–Bean的销毁</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span>      <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">destory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- collaborators and configuration for this bean go here--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="默认的初始化和销毁方法："><a href="#默认的初始化和销毁方法：" class="headerlink" title="默认的初始化和销毁方法："></a>默认的初始化和销毁方法：</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span>    <span class="token attr-name">default-init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span>     <span class="token attr-name">default-destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- collaborators and configuration for this bean go here --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h1 id="Spring-Bean-后置处理器"><a href="#Spring-Bean-后置处理器" class="headerlink" title="Spring Bean 后置处理器"></a>Spring Bean 后置处理器</h1><p>Bean后置处理器允许再调用初始化方法前后对bean进行额外的处理。</p><h4 id="BeanPostProcessor接口定义回调方法："><a href="#BeanPostProcessor接口定义回调方法：" class="headerlink" title="BeanPostProcessor接口定义回调方法："></a>BeanPostProcessor接口定义回调方法：</h4><p>​    可以实现该接口提供自己的实例化逻辑，依赖解析逻辑等。</p><p>可以通过BeanPostProcessor实现的Ordered接口提供的order属性来控制这些BeanPostProcessor接口的执行顺序。</p><p>ApplicationContext会自动检测由BeanPostProcessor接口定义的bean，注册这些bean为后置处理器，然后通过再容器中创建bean，在适当的时候调用它。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>chapter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeansException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanPostProcessor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitHelloWorld</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BeforeInitialization:"</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AfterInitialization:"</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Spring-依赖注入"><a href="#Spring-依赖注入" class="headerlink" title="Spring 依赖注入"></a>Spring 依赖注入</h1><blockquote><p>依赖注入就是把类粘合在一起同时保持他们独立。</p></blockquote><p>通常使用类的构造函数或setter方法参数引入另一个类来保证互相的独立性。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextEditor</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> SpellChecker spellChecker<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">TextEditor</span><span class="token punctuation">(</span>SpellChecker spellChecker<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>spellChecker <span class="token operator">=</span> spellChecker<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样只需将SpellChecker用作TextEditor的参数。然后实例化整个过程是由Spring框架的控制。</p><h4 id="Spring-基于构造函数的依赖注入"><a href="#Spring-基于构造函数的依赖注入" class="headerlink" title="Spring 基于构造函数的依赖注入"></a>Spring 基于构造函数的依赖注入</h4><blockquote><p>当容器调用带有一组参数的类构造函数时，基于构造函数的DI就完成了，其中每个参数代表一个对其他类的依赖。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>chapter<span class="token punctuation">.</span>editor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpellChecker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">SpellChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside SpellChecker Constructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">CheckSpelling</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside CheckSpell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>chapter<span class="token punctuation">.</span>editor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextEditor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> SpellChecker spellChecker<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TextEditor</span><span class="token punctuation">(</span>SpellChecker spellChecker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside TextEditor Constructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>spellChecker <span class="token operator">=</span> spellChecker<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SpellCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        spellChecker<span class="token punctuation">.</span><span class="token function">CheckSpelling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>chapter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>chapter<span class="token punctuation">.</span>editor<span class="token punctuation">.</span>TextEditor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AbstractApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"Beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TextEditor textEditor <span class="token operator">=</span> <span class="token punctuation">(</span>TextEditor<span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"textEditor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textEditor<span class="token punctuation">.</span><span class="token function">SpellCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.aop.chapter.editor.TextEditor<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>textEditor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spellChecker<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.aop.chapter.editor.SpellChecker<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spellChecker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="Spring-基于setter函数的依赖注入"><a href="#Spring-基于setter函数的依赖注入" class="headerlink" title="Spring 基于setter函数的依赖注入"></a>Spring 基于setter函数的依赖注入</h4><p>将上文的构造函数改为setter函数 &amp;&amp; 将<bean>标签中的<constructor-arg>元素改为 <property>元素 注意:引用的是对象的话要用<strong>ref</strong>，若直接传值的话用<strong>value</strong>属性。</property></constructor-arg></bean></p><h4 id="Spring-注入内部Beans"><a href="#Spring-注入内部Beans" class="headerlink" title="Spring 注入内部Beans"></a>Spring 注入内部Beans</h4><p>在java中内部类是在其它类中定义的一个类，同理，inner beans是在其他bean中定义的bean –&gt;称为内部bean，例如：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"..."</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"..."</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"..."</span><span class="token operator">></span>        <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"..."</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"..."</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><h1 id="Spring-Beans-自动装配"><a href="#Spring-Beans-自动装配" class="headerlink" title="Spring Beans 自动装配"></a>Spring Beans 自动装配</h1><p>Spring容器可以在不使用 <constructor-arg>和<property> 元素的情况下自动装配相互协作的bean之间的关系， 这有助于减少编写一个大的基于Spring的应用程序的xml配置的数量。</property></constructor-arg></p><h4 id="自动装配模式："><a href="#自动装配模式：" class="headerlink" title="自动装配模式："></a>自动装配模式：</h4><p>​    使用<bean>元素的autowire属性为一个bean定义指定自动装配模式。</bean></p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>no</td><td>默认，它意味着没有自动装配</td></tr><tr><td>byName</td><td>由属性名自动装配</td></tr><tr><td>byType</td><td>由属性数据类型自动装配</td></tr><tr><td>constructor</td><td>类似于byType，但该类型适用于构造函数参数类型</td></tr><tr><td>autodetect</td><td>Spring先通过constructor自动装配来连接，如果不执行，Spring尝试通过byType来自动装配</td></tr></tbody></table><h1 id="Spring基于注解的配置"><a href="#Spring基于注解的配置" class="headerlink" title="Spring基于注解的配置"></a>Spring基于注解的配置</h1><p>​    从Spring2.5开始就可以使用注解来配置依赖注入。可以使用相关类，方法或字段声明的注解，将bean配置移动到组件类本身。</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>context<span class="token operator">:</span>annotation<span class="token operator">-</span>config<span class="token operator">/</span><span class="token operator">></span></code></pre><h4 id="Spring-Reqired-注释（已过时）"><a href="#Spring-Reqired-注释（已过时）" class="headerlink" title="Spring @Reqired 注释（已过时）"></a>Spring @Reqired 注释（已过时）</h4><p>​    应用于bean属性的setter方法，它表明受影响的bean属性在配置时必须放在xml配置文件中，否则抛出BeanInitializationException异常。</p><h4 id="Spring-Autowired-注释"><a href="#Spring-Autowired-注释" class="headerlink" title="Spring @Autowired 注释"></a>Spring @Autowired 注释</h4><p><strong>@Autowired</strong>注释对在哪里和如何完成自动连接提供了更多的细微的控制。</p><p><strong>@Autowried</strong>注解可以用在属性、构造函数、set方法中。在需要注入的类中添加@Autowried注解，在使用的时候，spring会自动加载类实例。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用required = false 就算没值也不会报错</p><h4 id="Spring-Resource注释"><a href="#Spring-Resource注释" class="headerlink" title="Spring @Resource注释"></a>Spring @Resource注释</h4><p>​    可以在字段中或者setter方法中使用@Resource注释，它和在JavaEE5中的运作是一样的。@Resource注释使用一个‘name’属性， 该属性以一个bean名称形式被注入，它遵循byName自动连接语义。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setXxx</span><span class="token punctuation">(</span>Xxx xxx<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>如果没有明确指定一个‘name’，默认名称源于字段名或者setter方法。</p><h1 id="Spring基于Java的配置"><a href="#Spring基于Java的配置" class="headerlink" title="Spring基于Java的配置"></a>Spring基于Java的配置</h1><h4 id="Configuration-和-Bean-注解"><a href="#Configuration-和-Bean-注解" class="headerlink" title="@Configuration 和 @Bean 注解"></a><strong>@Configuration 和 @Bean 注解</strong></h4><p>带有@Configuration的注解表示这个类可以使用Spring IoC容器作为bean定义的来源。@Bean注解告诉Spring，一个带有@Bean的注解方法将返回一个对象，该对象应该被注册在Spring应用程序上下文的bean。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldConfig</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HelloWorld <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>带有@Bean注解的方法名称作为baen的ID，他创建并返回实际的bean。你的配置类可以申明多个@Bean。一旦定义了配置类，你就可以使用AnnotationConfigApplicationContext来加载并提供给Spring容器：</p><pre class=" language-java"><code class="language-java">ApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>HelloWorldConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样就不用配置文件啦。</p><p> <strong>import注解</strong></p><p>​    允许从另一个配置类中加载@Bean定义。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigA</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> A <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>ConfigA<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigB</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> B <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样实例化上下文时，就不要同时指定ConfigA和ConfigB了，只需提供ConfigB即可。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   ApplicationContext ctx <span class="token operator">=</span>    <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>ConfigB<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ......</span>   A a <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   B b <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Spring-中的事件处理"><a href="#Spring-中的事件处理" class="headerlink" title="Spring 中的事件处理"></a>Spring 中的事件处理</h1><p>Spring 提供了以下的标准事件：</p><table><thead><tr><th>序号</th><th align="center">Spring 内置事件 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td align="center"><strong>ContextRefreshedEvent</strong>             ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在 ConfigurableApplicationContext 接口中使用 refresh() 方法来发生。</td></tr><tr><td>2</td><td align="center"><strong>ContextStartedEvent</strong>                 当使用 ConfigurableApplicationContext 接口中的 start() 方法启动 ApplicationContext 时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。</td></tr><tr><td>3</td><td align="center">*<em>ContextStoppedEvent *</em>             当使用 ConfigurableApplicationContext 接口中的 stop() 方法停止 ApplicationContext 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作。</td></tr><tr><td>4</td><td align="center"><strong>ContextClosedEvent</strong>                当使用 ConfigurableApplicationContext 接口中的 close() 方法关闭 ApplicationContext 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启。</td></tr><tr><td>5</td><td align="center"><strong>RequestHandledEvent</strong>            这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。</td></tr></tbody></table><h1 id="Spring-框架的-AOP"><a href="#Spring-框架的-AOP" class="headerlink" title="Spring 框架的 AOP"></a>Spring 框架的 AOP</h1><p>Spring 框架的一个关键组件是<strong>面向方向的编程</strong>（AOP）框架。面向方向的编程需要吧程序逻辑分解成不同的部分称为所谓的关注点。跨一个应用程序的多个点的功能被称为<strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑。有各种各样的常见的很好的方面的例子，如日志记录、审计、声明式事务、安全性和缓存等。</p><p>在OOP中，关键单元模块是类，而在AOP中单元模块是方面。依赖注入帮助你对应用程序对象相互解耦和AOP可以帮助你从它们所影响的对象中对横切关注点解耦。AOP是像编程语言的触发物。</p><p>Spring AOP 模块提供拦截器来拦截一个应用程序，例如，当执行一个方法时，你可以在方法执行前和执行后添加额外的功能。</p><p><strong>AOP术语</strong></p><table><thead><tr><th>项</th><th align="center">描述</th></tr></thead><tbody><tr><td>Aspect</td><td align="center">一个模块具有一组提供横切需求的 APIs。例如，一个日志模块为了记录日志将被 AOP 方面调用。应用程序可以拥有任意数量的方面，这取决于需求。</td></tr><tr><td>Join point</td><td align="center">在你的应用程序中它代表一个点，你可以在插件 AOP 方面。你也能说，它是在实际的应用程序中，其中一个操作将使用 Spring AOP 框架。</td></tr><tr><td>Advice</td><td align="center">这是实际行动之前或之后执行的方法。这是在程序执行期间通过 Spring AOP 框架实际被调用的代码。</td></tr><tr><td>Pointcut</td><td align="center">这是一组一个或多个连接点，通知应该被执行。你可以使用表达式或模式指定切入点正如我们将在 AOP 的例子中看到的。</td></tr><tr><td>Introduction</td><td align="center">引用允许你添加新方法或属性到现有的类中。</td></tr><tr><td>Target object</td><td align="center">被一个或者多个方面所通知的对象，这个对象永远是一个被代理对象。也称为被通知对象。</td></tr><tr><td>Weaving</td><td align="center">Weaving 把方面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时，类加载时和运行时完成。</td></tr></tbody></table><h4 id="通过切点来选择连接点"><a href="#通过切点来选择连接点" class="headerlink" title="通过切点来选择连接点"></a>通过切点来选择连接点</h4><p>切点用于准确定位应该再什么地方应用切面的通知。通知和切面是切面的最基本元素。</p><p>在Spring AOP中，要使用AspectJ的切点表达式语言来定义切点。</p><p>关于Spring AOP的AspectJ切点，最重要的一点就是Spring仅支持ASpectJ切点指示器（pointcut designator）的一个子集。</p><p>​    表： Spring借助AspectJ的切点表达式语言来定义Spring切面</p><table><thead><tr><th>AspectJ指示器</th><th>描述</th></tr></thead><tbody><tr><td>arg()</td><td>限制连接点匹配参数为指定类型的执行方法</td></tr><tr><td>@arg()</td><td>限制连接点匹配参数由指定注解标注的执行方法</td></tr><tr><td>execution()</td><td>用于匹配是连接点的执行方法</td></tr><tr><td>this()</td><td>限制连接点匹配AOP代理的bean引用为指定类型的类</td></tr><tr><td>target</td><td>限制连接点匹配目标对象为指定类型的类</td></tr><tr><td>@target()</td><td>限制连接点匹配特定的执行对象，这些对象对应的类要具有指定类型的注解</td></tr><tr><td>within()</td><td>限制连接点匹配指定的类型</td></tr><tr><td>@winthin()</td><td>限制链接点匹配指定注解所标注的类型</td></tr><tr><td>@annotation</td><td>限定匹配带有指定注解的连接点</td></tr></tbody></table><h4 id="编写切点"><a href="#编写切点" class="headerlink" title="编写切点"></a>编写切点</h4><p>为了阐述Spring中的切面，我们需要有个主题来定义切面的切点。为此先定义一个Performance接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> concert<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Performance</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="定义切面"><a href="#定义切面" class="headerlink" title="定义切面"></a>定义切面</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> concert<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AfterReturning<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AfterThrowing<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Audience</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(**concert.Performance.perform(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">silenceCellPhones</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sliencing cell phones"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(**concert.Performance.perform(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takeSeats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Taking seats"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"execution(**concert.Performance.perform(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">applause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CLAP CLAP CLAP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"execution(**concert.Performance.perform(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demandRefund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Demanding a refund"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
