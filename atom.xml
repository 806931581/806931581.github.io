<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>头秃眼瞎</title>
  
  <subtitle>鼻歪嘴斜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zhoulis.top/"/>
  <updated>2019-08-20T12:49:33.556Z</updated>
  <id>http://www.zhoulis.top/</id>
  
  <author>
    <name>zhou李</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>org.springframework.beans.factory.UnsatisfiedDependencyException异常</title>
    <link href="http://www.zhoulis.top/exception"/>
    <id>http://www.zhoulis.top/exception</id>
    <published>2019-08-20T12:47:00.000Z</published>
    <updated>2019-08-20T12:49:33.556Z</updated>
    
    <content type="html"><![CDATA[<h3 id="org-springframework-beans-factory-UnsatisfiedDependencyException异常："><a href="#org-springframework-beans-factory-UnsatisfiedDependencyException异常：" class="headerlink" title="org.springframework.beans.factory.UnsatisfiedDependencyException异常："></a>org.springframework.beans.factory.UnsatisfiedDependencyException异常：</h3><pre><code>org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;dictServiceImpl&#39;: Unsatisfied dependency expressed through field &#39;dictMapper&#39;; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#39;dictMapper&#39; defined in file [G:\javaproject\mybtisspring\target\mybtis-spring\WEB-INF\classes\tk\mybatis\web\mapper\DictMapper.class]: Unsatisfied dependency expressed through bean property &#39;sqlSessionFactory&#39;; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &#39;sqlSessionFactory&#39; defined in class path resource [applicationContext.xml]: Invocation of init method failed; nested exception is org.springframework.core.NestedIOException: Failed to parse config resource: class path resource [mybatis-config.xml]; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: org.apache.ibatis.logging.LogException: Error setting Log implementation.  Cause: java.lang.NoClassDefFoundError: org/apache/log4j/Priority        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:588)        at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)        at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:366)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1264)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483)        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306)        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302)        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761)        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543)        at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:443)        at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:325)        at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)        at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4770)        at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5236)        at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)        at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:754)        at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:730)        at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:744)        at org.apache.catalina.startup.HostConfig.manageApp(HostConfig.java:1730)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.lang.reflect.Method.invoke(Method.java:498)        at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:287)        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)        at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)        at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:483)        at org.apache.catalina.mbeans.MBeanFactory.createStandardContext(MBeanFactory.java:432)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.lang.reflect.Method.invoke(Method.java:498)        at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:287)        at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)        at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)        at com.sun.jmx.remote.security.MBeanServerAccessController.invoke(MBeanServerAccessController.java:468)        at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468)        at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76)        at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309)        at java.security.AccessController.doPrivileged(Native Method)        at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1408)        at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.lang.reflect.Method.invoke(Method.java:498)        at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357)        at sun.rmi.transport.Transport$1.run(Transport.java:200)        at sun.rmi.transport.Transport$1.run(Transport.java:197)        at java.security.AccessController.doPrivileged(Native Method)        at sun.rmi.transport.Transport.serviceCall(Transport.java:196)        at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573)        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)        at java.security.AccessController.doPrivileged(Native Method)        at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)        at java.lang.Thread.run(Thread.java:748)</code></pre><p>解决办法：</p><p>​    在mybatis-config.xml中的settings 中如果有<setting name="logImpl" value="LOG4J"> 有没有配置好</setting></p><p>再就是service接口实现类上有没有加上@Service注解.</p><p>再就是扫包的路径有没有拼错</p><p>整合 要把Spring，mybatis配置导入到web.xml中：</p><pre><code>&lt;context-param&gt;    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;  &lt;/context-param&gt;---------------------&lt;init-param&gt;      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;      &lt;param-value&gt;classpath:mybatis-servlet.xml&lt;/param-value&gt;    &lt;/init-param&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;org-springframework-beans-factory-UnsatisfiedDependencyException异常：&quot;&gt;&lt;a href=&quot;#org-springframework-beans-factory-UnsatisfiedDependen
      
    
    </summary>
    
      <category term="Exception" scheme="http://www.zhoulis.top/categories/Exception/"/>
    
    
      <category term="java" scheme="http://www.zhoulis.top/tags/java/"/>
    
      <category term="Exceprion" scheme="http://www.zhoulis.top/tags/Exceprion/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis拦截器之下画线键值转驼峰</title>
    <link href="http://www.zhoulis.top/mybatis-hump"/>
    <id>http://www.zhoulis.top/mybatis-hump</id>
    <published>2019-08-18T12:47:00.000Z</published>
    <updated>2019-08-18T13:03:53.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis拦截器之下画线键值转驼峰"><a href="#MyBatis拦截器之下画线键值转驼峰" class="headerlink" title="MyBatis拦截器之下画线键值转驼峰"></a>MyBatis拦截器之下画线键值转驼峰</h1><p>​        在使用MyBatis时，为了方便扩展而使用Map类型的返回值。使用Map作为返回值时，Map中的键值就是查询结果中的列名，而列名一般都是大写小写字母或者下画线形式，和Java中使用的驼峰形式不一致，为了保证在使用map时属性一致，可以对结果进行特殊处理——使用拦截器将不同格式的列名转换为Java中的驼峰形式。实现代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>simple<span class="token punctuation">.</span>plugin<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>resultset<span class="token punctuation">.</span>ResultSetHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * MyBatis Map类型下划线key转小写驼峰形式 * * @author zhouli */</span><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span>   <span class="token comment" spellcheck="true">//ResultSetHandler接口方法签名。在查询方法中被调用</span>        <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>                type <span class="token operator">=</span> ResultSetHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                method <span class="token operator">=</span> <span class="token string">"handleResultSets"</span><span class="token punctuation">,</span>                args <span class="token operator">=</span> <span class="token punctuation">{</span>Statement<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"rawtypes"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CameHumpInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Invocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object object <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果时map类型，就对map的key转换</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">processMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Map<span class="token punctuation">)</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理Map类型     * @param map     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将以大写开头的字符串转换为小写，如果不包含下划线也会处理为驼峰</span>            <span class="token comment" spellcheck="true">//此处只通过这两个简单的标识来判断是否转换</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span>                    <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token function">underlineToCamelhump</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将下划线风格替换为驼峰风格     * @param inputString     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">underlineToCamelhump</span><span class="token punctuation">(</span>String inputString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> nextUpperCase <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inputString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> inputString<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'_'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nextUpperCase <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextUpperCase<span class="token punctuation">)</span><span class="token punctuation">{</span>                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">plugin</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Plugin<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span>Properties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个插件很简单，就是循环判断结果。如果是Map类型的结果，就对Map的key进行处理。当数据经过这个拦截器插件处理后，就可以保证在任何数据库中以Map作为结果值类型时，都有一致的key值，可以统一取值。想要使用该插件需要在mybatis-config.xml中配置该插件。</p><pre><code>//拦截器配置&lt;plugins&gt;  &lt;plugin interceptor=&quot;该拦截器的全限定类名&quot;/&gt;&lt;/plugins&gt;</code></pre><p>在上面拦截器代码的26行，<strong>invocation.proceed()执行的结果被强制转换为List类型</strong>。这是因为拦截器接口<strong>ResultSetHandler</strong>的<strong>handleResultSets</strong>方法的返回值为List类型。写拦截器时，<strong>要根据被拦截的方法来确定返回值的类型。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MyBatis拦截器之下画线键值转驼峰&quot;&gt;&lt;a href=&quot;#MyBatis拦截器之下画线键值转驼峰&quot; class=&quot;headerlink&quot; title=&quot;MyBatis拦截器之下画线键值转驼峰&quot;&gt;&lt;/a&gt;MyBatis拦截器之下画线键值转驼峰&lt;/h1&gt;&lt;p&gt;​ 
      
    
    </summary>
    
      <category term="MyBatis" scheme="http://www.zhoulis.top/categories/MyBatis/"/>
    
    
      <category term="java" scheme="http://www.zhoulis.top/tags/java/"/>
    
      <category term="MyBatis" scheme="http://www.zhoulis.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis缓存</title>
    <link href="http://www.zhoulis.top/mybatis-cache"/>
    <id>http://www.zhoulis.top/mybatis-cache</id>
    <published>2019-08-17T13:25:00.000Z</published>
    <updated>2019-08-17T13:27:52.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatis缓存"><a href="#MyBatis缓存" class="headerlink" title="MyBatis缓存"></a>MyBatis缓存</h2><h4 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h4><blockquote><p>一级缓存（也叫本地缓存）默认会启用，而且不能控制</p></blockquote><p>先看一个示例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheTest</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapperTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testL1Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SysUser user1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            UserMapper userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user1 <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1l<span class="token punctuation">)</span><span class="token punctuation">;</span>            user1<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"New Name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SysUser user2 <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1l<span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"New Name"</span><span class="token punctuation">,</span>user2<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开启新的sqlSession"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            UserMapper userMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SysUser user2 <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1l<span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">assertNotEquals</span><span class="token punctuation">(</span><span class="token string">"New Name"</span><span class="token punctuation">,</span>user2<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">assertNotEquals</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>            userMapper<span class="token punctuation">.</span><span class="token function">deleteUserById</span><span class="token punctuation">(</span>2L<span class="token punctuation">)</span><span class="token punctuation">;</span>            SysUser user3 <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1l<span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">assertNotEquals</span><span class="token punctuation">(</span>user2<span class="token punctuation">,</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1 <span class="token operator">==</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试该代码输出日志，结合日志分析代码</p><pre><code>DEBUG [main] -==&gt;  Preparing: select *from sys_user where id = ? DEBUG [main] -==&gt; Parameters: 1(Long)TRACE [main] -&lt;==    Columns: id, user_name, user_password, user_email, user_info, head_img, create_timeTRACE [main] -&lt;==        Row: 1, admin, 123456, admin@mybatis.tk, &lt;&lt;BLOB&gt;&gt;, &lt;&lt;BLOB&gt;&gt;, 2016-06-07 01:11:12DEBUG [main] -&lt;==      Total: 1truetrue开启新的sqlSessionDEBUG [main] -==&gt;  Preparing: select *from sys_user where id = ? DEBUG [main] -==&gt; Parameters: 1(Long)TRACE [main] -&lt;==    Columns: id, user_name, user_password, user_email, user_info, head_img, create_timeTRACE [main] -&lt;==        Row: 1, admin, 123456, admin@mybatis.tk, &lt;&lt;BLOB&gt;&gt;, &lt;&lt;BLOB&gt;&gt;, 2016-06-07 01:11:12DEBUG [main] -&lt;==      Total: 1DEBUG [main] -==&gt;  Preparing: {call delete_user_by_id(?)} DEBUG [main] -==&gt; Parameters: 2(Long)DEBUG [main] -&lt;==    Updates: 0DEBUG [main] -==&gt;  Preparing: select *from sys_user where id = ? DEBUG [main] -==&gt; Parameters: 1(Long)TRACE [main] -&lt;==    Columns: id, user_name, user_password, user_email, user_info, head_img, create_timeTRACE [main] -&lt;==        Row: 1, admin, 123456, admin@mybatis.tk, &lt;&lt;BLOB&gt;&gt;, &lt;&lt;BLOB&gt;&gt;, 2016-06-07 01:11:12DEBUG [main] -&lt;==      Total: 1falsefalse</code></pre><p>​    可以看出在第一次执行selectById方法获取SysUser数据时，真正的执行了数据库的查询，得到了user1的结果，第二次执行获取user2的时候，可以看出只有一次查询 ，也就是第二次并没有执行数据库操作 。 也就是说明了user1和user2<strong>指向同一处地址 也就是同一个对象</strong>。即user1改变会影响到user2的改变</p><p>Mybatis的一级缓存存在于SqlSession的生命周期中，在同一个SqlSession中查询时，会把执行的方法和参数通过算法生成缓存的键值，存入到Map对象中。 反复执行同一个方法时，总是返回<strong>同一个对象</strong>，因此就会出现user1的重新赋值会影响到user2. 在使用中要注意避免出现如上错误。 那要怎么解决这个问题呢？</p><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectById"</span> resultMap<span class="token operator">=</span><span class="token string">"userMap"</span> flushCache<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>            select <span class="token operator">*</span> from sys_user where id <span class="token operator">=</span> #<span class="token punctuation">{</span>id<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre><p>加上<strong>flushCache=“true”</strong>，这个属性后会清空当前一级缓存。因此每次都会重新从数据库中查询数据，此时的user2和user1就会成为两个不同的实例了。<strong>一级缓存只存在于sqlsession的生命周期中。 insert，update，delete操作都会清空一级缓存</strong></p><h4 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h4><blockquote><p>MyBatis的二级缓存不同于一级缓存只存在于SqlSession的生命周期中，而是理解为存在于SqlSessionFactory的生命周期中。</p></blockquote><h5 id="配置二级缓存"><a href="#配置二级缓存" class="headerlink" title="配置二级缓存"></a>配置二级缓存</h5><p>​    在MyBatis的全局配置settings中有一个参数cacheEnabled，这个参数是二级缓存的全局开关，默认值是true。所以不用配置，如果想要配置，可以在mybatis-config.xml中添加一下代码。</p><pre><code> &lt;settings&gt;        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;    &lt;/settings&gt;</code></pre><p>MyBatis的二级缓存是和命名空间绑定的，即要配置在Mapper.xml映射文件中，或配置在Mapper.java接口中。只需在UserMapper.xml中添加<cache>元素即可。</cache></p><p><strong>默认的二级缓存会有如下效果。</strong></p><ul><li><p>映射语句文件中的所有 SELECT 语句将会被缓存 。</p></li><li><p>映射语句文件中的所有 时SERT 、 UPDATE 、 DELETE 语句会刷新缓存 。<br>缓存会使用 Least Recently Used ( LRU，最近最少使用的）算法来收回 。</p></li><li><p>根据时间表（如 no Flush Interval ，没有刷新间隔），缓存不会以任何时间顺序来刷新 。<br>缓存会存储集合或对象（无论查询方法返回什么类型的值）的 1024 个引用。</p></li><li><p>缓存会被视为 read/write （可读／可写）的 ， 意味着对象检索不是共享的，而且可以安全<br>地被调用者修改，而不干扰其他调用者或线程所做的潜在修改 。</p><p>所有的这些属性都可以通过缓存元素的属性来修改：</p><pre><code>&lt;cacheeviction＝ ” FIFO ”  //FIFO(先进先出) LRU(最近最少使用) SOFT(软引用) WEAK(弱引用)flushlnterval=” 60000”size=” 512 ”readOnly=” true &quot; /&gt;  </code></pre></li></ul><h5 id="使用二级缓存"><a href="#使用二级缓存" class="headerlink" title="使用二级缓存"></a>使用二级缓存</h5><p>​    先写一个测试（要求pojo需要实现Serializable接口）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2Cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SysRole role1<span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            RoleMapper roleMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>RoleMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            role1 <span class="token operator">=</span> roleMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1l<span class="token punctuation">)</span><span class="token punctuation">;</span>            role1<span class="token punctuation">.</span><span class="token function">setRoleName</span><span class="token punctuation">(</span><span class="token string">"New Name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SysRole role2 <span class="token operator">=</span> roleMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1l<span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"New Name"</span><span class="token punctuation">,</span> role2<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>role1<span class="token punctuation">,</span>role2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开启新的sqlSession"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            RoleMapper roleMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>RoleMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SysRole role2 <span class="token operator">=</span> roleMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1l<span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"New Name"</span><span class="token punctuation">,</span>role2<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">assertNotEquals</span><span class="token punctuation">(</span>role1<span class="token punctuation">,</span>role2<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>role1<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------"</span> <span class="token operator">+</span> role2<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SysRole role3 <span class="token operator">=</span> roleMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>1l<span class="token punctuation">)</span><span class="token punctuation">;</span>            Assert<span class="token punctuation">.</span><span class="token function">assertNotEquals</span><span class="token punctuation">(</span>role2<span class="token punctuation">,</span>role3<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>role2<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------"</span> <span class="token operator">+</span> role3<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>执行测试输出日志，内容如下</p><pre><code>DEBUG [main] -Cache Hit Ratio [tk.mybatis.simple.mapper.RoleMapper]: 0.0DEBUG [main] -==&gt;  Preparing: select *from sys_role where id = ? DEBUG [main] -==&gt; Parameters: 1(Long)TRACE [main] -&lt;==    Columns: id, role_name, enabled, create_by, create_timeTRACE [main] -&lt;==        Row: 1, 管理员, 1, 1, 2016-04-01 17:02:14DEBUG [main] -&lt;==      Total: 1DEBUG [main] -Cache Hit Ratio [tk.mybatis.simple.mapper.RoleMapper]: 0.0开启新的sqlSessionDEBUG [main] -Cache Hit Ratio [tk.mybatis.simple.mapper.RoleMapper]: 0.3333333333333333New Name------New NameDEBUG [main] -Cache Hit Ratio [tk.mybatis.simple.mapper.RoleMapper]: 0.5New Name------New Name</code></pre><p>在第一个try块中。在一个sqlsession中所以是一级缓存。当调用close方法关闭sqlsession时才会保存查询数据到二级缓存中。</p><p>在第二个try块中，再次获取role2时，日志并没有输出数据库查询，而是输出了命中率0.333333333333。这是第3次查询，并且得到了缓存值，一次被命中，所以命中率为三分之一。后面以此类推。</p><blockquote><p><strong><em>Mybatis默认提供缓存实现是基于Map实现的内存缓存。所以当需要缓存大量数据时就要选择一些类似Ehcache的框架或Redis缓存来保存二级缓存数据了。</em></strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MyBatis缓存&quot;&gt;&lt;a href=&quot;#MyBatis缓存&quot; class=&quot;headerlink&quot; title=&quot;MyBatis缓存&quot;&gt;&lt;/a&gt;MyBatis缓存&lt;/h2&gt;&lt;h4 id=&quot;一级缓存&quot;&gt;&lt;a href=&quot;#一级缓存&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="MyBatis" scheme="http://www.zhoulis.top/categories/MyBatis/"/>
    
    
      <category term="java" scheme="http://www.zhoulis.top/tags/java/"/>
    
      <category term="MyBatis" scheme="http://www.zhoulis.top/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>初识Spring(二)</title>
    <link href="http://www.zhoulis.top/spring2"/>
    <id>http://www.zhoulis.top/spring2</id>
    <published>2019-08-07T14:25:00.000Z</published>
    <updated>2019-08-15T13:39:04.740Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Beans-自动装配"><a href="#Spring-Beans-自动装配" class="headerlink" title="Spring Beans 自动装配"></a>Spring Beans 自动装配</h1><p>Spring容器可以在不使用 <constructor-arg>和<property> 元素的情况下自动装配相互协作的bean之间的关系， 这有助于减少编写一个大的基于Spring的应用程序的xml配置的数量。</property></constructor-arg></p><h4 id="自动装配模式："><a href="#自动装配模式：" class="headerlink" title="自动装配模式："></a>自动装配模式：</h4><pre><code>使用&lt;bean&gt;元素的autowire属性为一个bean定义指定自动装配模式。</code></pre><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>no</td><td>默认，它意味着没有自动装配</td></tr><tr><td>byName</td><td>由属性名自动装配</td></tr><tr><td>byType</td><td>由属性数据类型自动装配</td></tr><tr><td>constructor</td><td>类似于byType，但该类型适用于构造函数参数类型</td></tr><tr><td>autodetect</td><td>Spring先通过constructor自动装配来连接，如果不执行，Spring尝试通过byType来自动装配</td></tr></tbody></table><h1 id="Spring基于注解的配置"><a href="#Spring基于注解的配置" class="headerlink" title="Spring基于注解的配置"></a>Spring基于注解的配置</h1><pre><code>从Spring2.5开始就可以使用注解来配置依赖注入。可以使用相关类，方法或字段声明的注解，将bean配置移动到组件类本身。</code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>context<span class="token operator">:</span>annotation<span class="token operator">-</span>config<span class="token operator">/</span><span class="token operator">></span></code></pre><h4 id="Spring-Reqired-注释（已过时）"><a href="#Spring-Reqired-注释（已过时）" class="headerlink" title="Spring @Reqired 注释（已过时）"></a>Spring @Reqired 注释（已过时）</h4><pre><code>应用于bean属性的setter方法，它表明受影响的bean属性在配置时必须放在xml配置文件中，否则抛出BeanInitializationException异常。</code></pre><h4 id="Spring-Autowired-注释"><a href="#Spring-Autowired-注释" class="headerlink" title="Spring @Autowired 注释"></a>Spring @Autowired 注释</h4><p><strong>@Autowired</strong>注释对在哪里和如何完成自动连接提供了更多的细微的控制。</p><p><strong>@Autowried</strong>注解可以用在属性、构造函数、set方法中。在需要注入的类中添加@Autowried注解，在使用的时候，spring会自动加载类实例。</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用required = false 就算没值也不会报错</p><h4 id="Spring-Resource注释"><a href="#Spring-Resource注释" class="headerlink" title="Spring @Resource注释"></a>Spring @Resource注释</h4><pre><code>可以在字段中或者setter方法中使用@Resource注释，它和在JavaEE5中的运作是一样的。@Resource注释使用一个‘name’属性， 该属性以一个bean名称形式被注入，它遵循byName自动连接语义。</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setXxx</span><span class="token punctuation">(</span>Xxx xxx<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>如果没有明确指定一个‘name’，默认名称源于字段名或者setter方法。</p><h1 id="Spring基于Java的配置"><a href="#Spring基于Java的配置" class="headerlink" title="Spring基于Java的配置"></a>Spring基于Java的配置</h1><h4 id="Configuration-和-Bean-注解"><a href="#Configuration-和-Bean-注解" class="headerlink" title="@Configuration 和 @Bean 注解"></a><strong>@Configuration 和 @Bean 注解</strong></h4><p>带有@Configuration的注解表示这个类可以使用Spring IoC容器作为bean定义的来源。@Bean注解告诉Spring，一个带有@Bean的注解方法将返回一个对象，该对象应该被注册在Spring应用程序上下文的bean。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldConfig</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HelloWorld <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>带有@Bean注解的方法名称作为baen的ID，他创建并返回实际的bean。你的配置类可以申明多个@Bean。一旦定义了配置类，你就可以使用AnnotationConfigApplicationContext来加载并提供给Spring容器：</p><pre class=" language-java"><code class="language-java">ApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>HelloWorldConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样就不用配置文件啦。</p><p> <strong>import注解</strong></p><pre><code>允许从另一个配置类中加载@Bean定义。</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigA</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> A <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>ConfigA<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigB</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> B <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样实例化上下文时，就不要同时指定ConfigA和ConfigB了，只需提供ConfigB即可。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   ApplicationContext ctx <span class="token operator">=</span>    <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>ConfigB<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ......</span>   A a <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   B b <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="Spring-中的事件处理"><a href="#Spring-中的事件处理" class="headerlink" title="Spring 中的事件处理"></a>Spring 中的事件处理</h1><p>Spring 提供了以下的标准事件：</p><table><thead><tr><th>序号</th><th align="center">Spring 内置事件 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td align="center"><strong>ContextRefreshedEvent</strong>             ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在 ConfigurableApplicationContext 接口中使用 refresh() 方法来发生。</td></tr><tr><td>2</td><td align="center"><strong>ContextStartedEvent</strong>                 当使用 ConfigurableApplicationContext 接口中的 start() 方法启动 ApplicationContext 时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。</td></tr><tr><td>3</td><td align="center">*<em>ContextStoppedEvent *</em>             当使用 ConfigurableApplicationContext 接口中的 stop() 方法停止 ApplicationContext 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作。</td></tr><tr><td>4</td><td align="center"><strong>ContextClosedEvent</strong>                当使用 ConfigurableApplicationContext 接口中的 close() 方法关闭 ApplicationContext 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启。</td></tr><tr><td>5</td><td align="center"><strong>RequestHandledEvent</strong>            这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。</td></tr></tbody></table><h1 id="Spring-框架的-AOP"><a href="#Spring-框架的-AOP" class="headerlink" title="Spring 框架的 AOP"></a>Spring 框架的 AOP</h1><p>Spring 框架的一个关键组件是<strong>面向方向的编程</strong>（AOP）框架。面向方向的编程需要吧程序逻辑分解成不同的部分称为所谓的关注点。跨一个应用程序的多个点的功能被称为<strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑。有各种各样的常见的很好的方面的例子，如日志记录、审计、声明式事务、安全性和缓存等。</p><p>在OOP中，关键单元模块是类，而在AOP中单元模块是方面。依赖注入帮助你对应用程序对象相互解耦和AOP可以帮助你从它们所影响的对象中对横切关注点解耦。AOP是像编程语言的触发物。</p><p>Spring AOP 模块提供拦截器来拦截一个应用程序，例如，当执行一个方法时，你可以在方法执行前和执行后添加额外的功能。</p><p><strong>AOP术语</strong></p><table><thead><tr><th>项</th><th align="center">描述</th></tr></thead><tbody><tr><td>Aspect</td><td align="center">一个模块具有一组提供横切需求的 APIs。例如，一个日志模块为了记录日志将被 AOP 方面调用。应用程序可以拥有任意数量的方面，这取决于需求。</td></tr><tr><td>Join point</td><td align="center">在你的应用程序中它代表一个点，你可以在插件 AOP 方面。你也能说，它是在实际的应用程序中，其中一个操作将使用 Spring AOP 框架。</td></tr><tr><td>Advice</td><td align="center">这是实际行动之前或之后执行的方法。这是在程序执行期间通过 Spring AOP 框架实际被调用的代码。</td></tr><tr><td>Pointcut</td><td align="center">这是一组一个或多个连接点，通知应该被执行。你可以使用表达式或模式指定切入点正如我们将在 AOP 的例子中看到的。</td></tr><tr><td>Introduction</td><td align="center">引用允许你添加新方法或属性到现有的类中。</td></tr><tr><td>Target object</td><td align="center">被一个或者多个方面所通知的对象，这个对象永远是一个被代理对象。也称为被通知对象。</td></tr><tr><td>Weaving</td><td align="center">Weaving 把方面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时，类加载时和运行时完成。</td></tr></tbody></table><h4 id="通过切点来选择连接点"><a href="#通过切点来选择连接点" class="headerlink" title="通过切点来选择连接点"></a>通过切点来选择连接点</h4><p>切点用于准确定位应该再什么地方应用切面的通知。通知和切面是切面的最基本元素。</p><p>在Spring AOP中，要使用AspectJ的切点表达式语言来定义切点。</p><p>关于Spring AOP的AspectJ切点，最重要的一点就是Spring仅支持ASpectJ切点指示器（pointcut designator）的一个子集。</p><pre><code>表： Spring借助AspectJ的切点表达式语言来定义Spring切面</code></pre><table><thead><tr><th>AspectJ指示器</th><th>描述</th></tr></thead><tbody><tr><td>arg()</td><td>限制连接点匹配参数为指定类型的执行方法</td></tr><tr><td>@arg()</td><td>限制连接点匹配参数由指定注解标注的执行方法</td></tr><tr><td>execution()</td><td>用于匹配是连接点的执行方法</td></tr><tr><td>this()</td><td>限制连接点匹配AOP代理的bean引用为指定类型的类</td></tr><tr><td>target</td><td>限制连接点匹配目标对象为指定类型的类</td></tr><tr><td>@target()</td><td>限制连接点匹配特定的执行对象，这些对象对应的类要具有指定类型的注解</td></tr><tr><td>within()</td><td>限制连接点匹配指定的类型</td></tr><tr><td>@winthin()</td><td>限制链接点匹配指定注解所标注的类型</td></tr><tr><td>@annotation</td><td>限定匹配带有指定注解的连接点</td></tr></tbody></table><h4 id="编写切点"><a href="#编写切点" class="headerlink" title="编写切点"></a>编写切点</h4><p>为了阐述Spring中的切面，我们需要有个主题来定义切面的切点。为此先定义一个Performance接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> concert<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Performance</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">perform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="定义切面"><a href="#定义切面" class="headerlink" title="定义切面"></a>定义切面</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> concert<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AfterReturning<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AfterThrowing<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Audience</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(**concert.Performance.perform(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">silenceCellPhones</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sliencing cell phones"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(**concert.Performance.perform(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takeSeats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Taking seats"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"execution(**concert.Performance.perform(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">applause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CLAP CLAP CLAP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"execution(**concert.Performance.perform(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demandRefund</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Demanding a refund"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Beans-自动装配&quot;&gt;&lt;a href=&quot;#Spring-Beans-自动装配&quot; class=&quot;headerlink&quot; title=&quot;Spring Beans 自动装配&quot;&gt;&lt;/a&gt;Spring Beans 自动装配&lt;/h1&gt;&lt;p&gt;Spring容器可以
      
    
    </summary>
    
      <category term="Spring" scheme="http://www.zhoulis.top/categories/Spring/"/>
    
    
      <category term="java" scheme="http://www.zhoulis.top/tags/java/"/>
    
      <category term="Spring" scheme="http://www.zhoulis.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.zhoulis.top/hello-world"/>
    <id>http://www.zhoulis.top/hello-world</id>
    <published>2019-08-07T01:25:00.000Z</published>
    <updated>2019-08-18T12:59:30.111Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Markdown" scheme="http://www.zhoulis.top/categories/Markdown/"/>
    
    
      <category term="Typora" scheme="http://www.zhoulis.top/tags/Typora/"/>
    
      <category term="Markdown" scheme="http://www.zhoulis.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>初识Spring(一)</title>
    <link href="http://www.zhoulis.top/spring"/>
    <id>http://www.zhoulis.top/spring</id>
    <published>2019-08-07T01:25:00.000Z</published>
    <updated>2019-08-15T13:38:20.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Bean-作用域"><a href="#Spring-Bean-作用域" class="headerlink" title="Spring Bean 作用域"></a>Spring Bean 作用域</h1><ul><li><strong>singleton   单例模式：（默认值）在Spring IoC容器仅存在一个Bean实例</strong></li><li><strong>prototype  原型模式： 每次从容器中调用Bean都会返回一个新实例。</strong></li><li>request 请求模式：每次Http请求都会创建一个新的Bean，仅使用于WebApplicationContext环境</li><li>Session 会话模式：同一个Http Session 共享一个Bean， 不用的Session使用不同的Bean，仅使用于WebApplicationContext环境</li><li>global-session模式：一般用于Portlet应用环境，该运用仅使用于WebApplicationContext环境</li></ul><h4 id="singleton-作用域："><a href="#singleton-作用域：" class="headerlink" title="singleton 作用域："></a>singleton 作用域：</h4><p>​    singleton是单例类型， 就是在创建起容器就同时自动创建了一个bean对象， 不管你是否使用， 他都存在了， 每次获取到的对象都是同一个对象。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- collaborators and configuration for this bean go here--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="prototype-作用域："><a href="#prototype-作用域：" class="headerlink" title="prototype 作用域："></a>prototype 作用域：</h4><p>​    它再我们创建容器的时候并没有实例化，而是我们获取bean的时候才去创建一个对象，而且每次获取到的对象都不是同一个对象。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- collaborators and configuration for this bean go here--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h1 id="Spring-Bean-生命周期"><a href="#Spring-Bean-生命周期" class="headerlink" title="Spring Bean 生命周期"></a>Spring Bean 生命周期</h1><blockquote><p>定义安装和拆卸一个bean，声明 init-method 和destroy-method参数的。</p><p>实例化bean时立即调用 init-methood 从容器中移除bean时调用 destroy-method</p><p>Bean的生命周期可以表达为：Bean的定义—–Bean的初始化—Bean的使用—–Bean的销毁</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span>      <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">destory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- collaborators and configuration for this bean go here--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="默认的初始化和销毁方法："><a href="#默认的初始化和销毁方法：" class="headerlink" title="默认的初始化和销毁方法："></a>默认的初始化和销毁方法：</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd<span class="token punctuation">"</span></span>    <span class="token attr-name">default-init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span>     <span class="token attr-name">default-destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!-- collaborators and configuration for this bean go here --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h1 id="Spring-Bean-后置处理器"><a href="#Spring-Bean-后置处理器" class="headerlink" title="Spring Bean 后置处理器"></a>Spring Bean 后置处理器</h1><p>Bean后置处理器允许再调用初始化方法前后对bean进行额外的处理。</p><h4 id="BeanPostProcessor接口定义回调方法："><a href="#BeanPostProcessor接口定义回调方法：" class="headerlink" title="BeanPostProcessor接口定义回调方法："></a>BeanPostProcessor接口定义回调方法：</h4><p>​    可以实现该接口提供自己的实例化逻辑，依赖解析逻辑等。</p><p>可以通过BeanPostProcessor实现的Ordered接口提供的order属性来控制这些BeanPostProcessor接口的执行顺序。</p><p>ApplicationContext会自动检测由BeanPostProcessor接口定义的bean，注册这些bean为后置处理器，然后通过再容器中创建bean，在适当的时候调用它。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>chapter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeansException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanPostProcessor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitHelloWorld</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BeforeInitialization:"</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AfterInitialization:"</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Spring-依赖注入"><a href="#Spring-依赖注入" class="headerlink" title="Spring 依赖注入"></a>Spring 依赖注入</h1><blockquote><p>依赖注入就是把类粘合在一起同时保持他们独立。</p></blockquote><p>通常使用类的构造函数或setter方法参数引入另一个类来保证互相的独立性。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextEditor</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> SpellChecker spellChecker<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">TextEditor</span><span class="token punctuation">(</span>SpellChecker spellChecker<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>spellChecker <span class="token operator">=</span> spellChecker<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样只需将SpellChecker用作TextEditor的参数。然后实例化整个过程是由Spring框架的控制。</p><h4 id="Spring-基于构造函数的依赖注入"><a href="#Spring-基于构造函数的依赖注入" class="headerlink" title="Spring 基于构造函数的依赖注入"></a>Spring 基于构造函数的依赖注入</h4><blockquote><p>当容器调用带有一组参数的类构造函数时，基于构造函数的DI就完成了，其中每个参数代表一个对其他类的依赖。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>chapter<span class="token punctuation">.</span>editor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpellChecker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">SpellChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside SpellChecker Constructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">CheckSpelling</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside CheckSpell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>chapter<span class="token punctuation">.</span>editor<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextEditor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> SpellChecker spellChecker<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TextEditor</span><span class="token punctuation">(</span>SpellChecker spellChecker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside TextEditor Constructor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>spellChecker <span class="token operator">=</span> spellChecker<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SpellCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        spellChecker<span class="token punctuation">.</span><span class="token function">CheckSpelling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>chapter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>chapter<span class="token punctuation">.</span>editor<span class="token punctuation">.</span>TextEditor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AbstractApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AbstractApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"Beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TextEditor textEditor <span class="token operator">=</span> <span class="token punctuation">(</span>TextEditor<span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"textEditor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textEditor<span class="token punctuation">.</span><span class="token function">SpellCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.aop.chapter.editor.TextEditor<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>textEditor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spellChecker<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.aop.chapter.editor.SpellChecker<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spellChecker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h4 id="Spring-基于setter函数的依赖注入"><a href="#Spring-基于setter函数的依赖注入" class="headerlink" title="Spring 基于setter函数的依赖注入"></a>Spring 基于setter函数的依赖注入</h4><p>将上文的构造函数改为setter函数 &amp;&amp; 将<bean>标签中的<constructor-arg>元素改为 <property>元素 注意:引用的是对象的话要用<strong>ref</strong>，若直接传值的话用<strong>value</strong>属性。</property></constructor-arg></bean></p><h4 id="Spring-注入内部Beans"><a href="#Spring-注入内部Beans" class="headerlink" title="Spring 注入内部Beans"></a>Spring 注入内部Beans</h4><p>在java中内部类是在其它类中定义的一个类，同理，inner beans是在其他bean中定义的bean –&gt;称为内部bean，例如：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"..."</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"..."</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"..."</span><span class="token operator">></span>        <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"..."</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"..."</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Bean-作用域&quot;&gt;&lt;a href=&quot;#Spring-Bean-作用域&quot; class=&quot;headerlink&quot; title=&quot;Spring Bean 作用域&quot;&gt;&lt;/a&gt;Spring Bean 作用域&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sing
      
    
    </summary>
    
      <category term="Spring" scheme="http://www.zhoulis.top/categories/Spring/"/>
    
    
      <category term="java" scheme="http://www.zhoulis.top/tags/java/"/>
    
      <category term="Spring" scheme="http://www.zhoulis.top/tags/Spring/"/>
    
  </entry>
  
</feed>
